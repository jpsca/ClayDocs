{"en": {"/#": {"title": "Home", "body": "<p>meh \ud83d\udc4d lorem ipsum  <kbd>\u2387 Alt</kbd>+<kbd>F4</kbd>  jaja</p> <p>asas  <kbd>\u2193 arrow_down</kbd>  asas  <kbd>\u2193 down</kbd>  asas  <kbd>\u2190 arrow_left</kbd>  asas  <kbd>\u2190 left</kbd>  asas  <kbd>\u2192 arrow_right</kbd>  asas  <kbd>\u2192 right</kbd>  asas  <kbd>\u2191 arrow_up</kbd>  asas  <kbd>\u2191 up</kbd> </p> <p>asas  <kbd>\u2387 alt</kbd>  asas  <kbd>\u2387 opt</kbd>  asas  <kbd>\u2387 option</kbd>  asas  <kbd>\u232b back</kbd>  asas  <kbd>\u232b backspace</kbd>  asas  <kbd>\u232b bksp</kbd>  asas  <kbd>\u21ea caps_lock</kbd>  asas  <kbd>\u2318 cmd</kbd>  asas  <kbd>\u2318 command</kbd>  asas  <kbd>\u2303 control</kbd>  asas  <kbd>\u2303 ctrl</kbd>  asas  <kbd>\u23ce enter</kbd>  asas  <kbd>\u23ce return</kbd>  asas  <kbd>\u238b esc</kbd>  asas  <kbd>\u238b escape</kbd>  asas  <kbd>\u2630 menu</kbd>  asas  <kbd>\u25c6 meta</kbd>  asas  <kbd>\u2399 print_screen</kbd>  asas  <kbd>\u2399 print</kbd>  asas  <kbd>\u2399 prtsc</kbd>  asas  <kbd>\u21e7 shift</kbd>  asas  <kbd>\u2756 super</kbd>  asas  <kbd>\u21e5 tab</kbd>  asas  <kbd>\u229e win</kbd>  asas  <kbd>\u229e windows</kbd> </p>"}, "/guide/#": {"title": "Getting started", "body": ""}, "/guide/#getting-started": {"title": "Getting started", "body": ""}, "/guide/#installation": {"title": "Installation", "body": "<p>Install the package using <code>pip</code>.</p> <div><pre><code>pip install tcom\n</code></pre></div> <p><details open> <summary> Wat?  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary>  NOTE  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary> NOTE  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary>  TIP  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary> TIP  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary>  WARNING  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary> WARNING  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary>  ERROR  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary> ERROR  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary>  INTERNAL  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary> INTERNAL  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary>  TODO  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p> <p><details open> <summary> TODO  </summary> <div>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</div> </details></p>"}, "/guide/#usage": {"title": "Usage", "body": "<p>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</p> <div><pre><code>from tcom import Catalog\n\ncatalog = Catalog()\ncatalog.add_folder(\"myapp/components\")\n</code></pre></div> <p>You use the catalog to render a parent component from your views:</p> <div><pre><code>def myview():\n  ...\n  return catalog.render(\n    \"ComponentName\",\n    title=\"Lorem ipsum\",\n    message=\"Hello\",\n  )\n</code></pre></div>"}, "/guide/#components": {"title": "Components", "body": "<p>The components are <code>.jinja</code> files. The name of the file before the first dot is the component name and it <strong>must</strong> begin with an uppercase letter. This is the only way to distinguish themn from regular HTML tags.</p> <p>For example, if the filename es <code>PersonForm.jinja</code>, the name of the component is <code>PersonForm</code> and can be used like <code><PersonForm>...</PersonForm></code>.</p> <p>A component can begin with a Jinja comment where it declare what arguments it takes. Some of these arguments might have a default value (making them optional):</p> <div><pre><code>{#def title, message='Hi' #}\n\n<h1>{{ title }}</h1>\n<div>{{ message }}. This is my component</div>\n</code></pre></div>"}, "/guide/#jinja": {"title": "Jinja", "body": "<p>Template Components use Jinja internally to render the templates. You can add your own global variables and functions, filters, tests, and Jinja extensions when creating the catalog:</p> <div><pre><code>from tcom import Catalog\n\ncatalog = Catalog(\n    globals={ ... },\n    filters={ ... },\n    tests={ ... },\n    extensions=[ ... ],\n)\n</code></pre></div> <p>or afterwards.</p> <div><pre><code>catalog.jinja_env.globals.update({ ... })\ncatalog.jinja_env.filters.update({ ... })\ncatalog.jinja_env.tests.update({ ... })\ncatalog.jinja_env.extensions.extend([ ... ])\n</code></pre></div> <p>If you use <strong>Flask</strong>, for example, you should pass the values of its own Jinja environment:</p> <div><pre><code>app = Flask(__name__)\n\ncatalog = tcom.Catalog(\n    globals=app.jinja_env.globals,\n    filters=app.jinja_env.filters,\n    tests=app.jinja_env.tests,\n    extensions=app.jinja_env.extensions,\n)\n</code></pre></div> <p>The \"do\" extension is enabled by default, so you can write things like:</p> <div><pre><code>{% do attrs.add_class(\"btn\") %}\n</code></pre></div>"}, "/guide/arguments#": {"title": "Component Arguments", "body": "<header> <div> <p>Guide</p> <h1>Component Arguments </div> <p>More often than not, a component takes one or more arguments to render.</p> </header> <p>Every argument must be declared at the beginning of the component with <code>{#def arguments #}</code>. The syntax is very similar to how you declare the arguments of a python function:</p> <div>components/Form.jinja<pre><code>{#def action, method='post', multipart=False #}\n\n<form method=\"{{ method }}\" action=\"{{ action }}\"{%- if multipart %} enctype=\"multipart/form-data\"{% endif %}>\n  {{ content }}\n</form>\n</code></pre></div> <p>In this example, the component takes three arguments: \"action\", \"method\", and \"multipart\". The last two have a default value, so they are optional, but the first one doesn't. That means it must be passed a value when rendering the component.</p> <p>So all of these are valid forms to use this component:</p> <div><pre><code><Form action=\"/new\">...</Form>\n<Form action=\"/new\" method=\"PATCH\">...</Form>\n<Form multipart={False} action=\"/new\">...</Form>\n</code></pre></div> <p>The values of the declared arguments can be used in the template as values with the same name.</p>"}, "/guide/arguments#non-string-arguments": {"title": "Non-string arguments", "body": "<p>In the example above, both \"action\" and \"method\" are strings, but \"multipart\" is a boolean, so we cannot pass it like <code>multipart=\"false\"</code> because that will make it a string that evaluates as <code>True</code>, which is the opposite of what we want.</p> <p>Instead, you must use curly brackets: <code>multipart={False}</code>, instead of quotes: <code>multipart=\"False\"</code>.</p> <p><details open> <summary>  NOTE  </summary> <div>Using lowercase booleans (<code>true</code> or <code>false</code>) is also valid.</div> </details></p> <p>Between the brackets, you can use datetimes, objects, lists, or any Python expressions.</p> <div><pre><code>{# A datetime value #}\n<DateTime date={datetime_value} />\n\n{# A query result #}\n<Post post={post} />\n\n{# In-place calculations #}\n<FooBar number={2**10} />\n\n{# A list #}\n<FooBar items={[1,2,3,4]} />\n</code></pre></div>"}, "/guide/arguments#components-with-content": {"title": "Components with content", "body": "<p>So far we have seen self-closing components, but there is another, much more useful type: components that wrap other HTML content and/or other components.</p> <div><pre><code>{# Self-closing component #}\n<Name arguments />\n\n{# Component with content #}\n<Name arguments> ...o far we have seen self-closing components here... </Name>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>{{ title }}</title>\n</head>\n<body>\n{{ content }}\n</body>\n</code></pre></div> <div>components/ArchivePage.jinja<pre><code>{#def posts #}\n\n<PageLayout title=\"Archive\">\n  {% for post in posts %}\n  <Post post={post} />\n  {% endfor %}\n</PageLayout>\n</code></pre></div> <p>Everything between the open and close tags of the components will be rendered and passed to the <code>PageLayout</code> component as a special, implicit, <code>content</code> variable.</p> <p>To test a component in isolation, you can also manually send a content argument using the special <code>__content</code> argument:</p> <div><pre><code>catalog.render(\"PageLayout\", title=\"Hello world\", __content=\"TEST\")\n</code></pre></div>"}, "/guide/arguments#extra-arguments": {"title": "Extra arguments", "body": "<p>If you pass arguments not declared in a component, those are not discarded, but rather collected in a <code>attrs</code> object. Read more about it in the next section.</p>"}, "/guide/extra#": {"title": "Extra Arguments", "body": ""}, "/guide/extra#extra-arguments": {"title": "Extra Arguments", "body": "<p>If you pass arguments not declared in a component, those are not discarded, but rather collected in a <code>attrs</code> object that can render these extra arguments calling <code>attrs.render()</code></p> <p>For example, this component:</p> <div>components/Card.jinja<pre><code>{#def title #}\n\n<div {{ attrs.render() }}>\n  <h1>{{ title }}</h1>\n  {{ content }}\n</div>\n</code></pre></div> <p>Called as:</p> <div><pre><code><Card title=\"Products\" class=\"mb-10\" open>bla</Card>\n</code></pre></div> <p>Will be rendered as:</p> <div><pre><code><div class=\"mb-10\" open>\n  <h1>Products</h1>\n  bla\n</div>\n</code></pre></div> <p>You can add or remove arguments before rendering them using the other methods of the <code>attrs</code> object. For example:</p> <div><pre><code>{#def title #}\n\n{% do attrs.add_class(\"card\") -%}\n<div {{ attrs.render() }}>\n  <h1>{{ title }}</h1>\n  {{ content }}\n</div>\n</code></pre></div>"}, "/guide/extra#attrs-methods": {"title": "attrs methods", "body": ""}, "/guide/extra#addname-valuetrue": {"title": ".add(name, value=True)", "body": "<p>Adds an attribute (e.g. <code>type=\"text\"</code>) or sets a property (e.g. <code>disabled</code>). Pass a name and a value to set an attribute. Omit the value or use <code>True</code> as value to set a property instead.</p> <div><pre><code>{% do attrs.add(\"disabled\") %}\n{% do attrs.add(\"readonly\", True) %}\n{% do attrs.add(\"data-test\", \"foobar\") %}\n{% do attrs.add(\"id\", 3) %}\n</code></pre></div>"}, "/guide/extra#removename": {"title": ".remove(name)", "body": "<p>Removes an attribute or property.</p> <div><pre><code>{% if active -%}\n{% do attrs.remove(\"disabled\") %}\n{%- endif %}\n</code></pre></div>"}, "/guide/extra#add_classname-add_classesname1-name2": {"title": ".add_class(name) / .add_classes(name1, name2, ...)", "body": "<p>Adds one or more classes to the list of classes (both are actually the same method).</p> <div><pre><code>{% do attrs.add_class(\"card\") %}\n{% do attrs.add_classes(\"active\", \"animated\", \"bright\") %}\n{% do attrs.add_classes(\"active animated bright\") %}\n</code></pre></div>"}, "/guide/extra#remove_classname-remove_classesname1-name2": {"title": ".remove_class(name) / .remove_classes(name1, name2, ...)", "body": "<p>Removes one or more classes from the list of classes (both are actually the same method).</p> <div><pre><code>{% do attrs.remove_class(\"hidden\") %}\n{% do attrs.remove_classes(\"active\", \"animated\") %}\n</code></pre></div>"}, "/guide/extra#setdefaultname-valuetrue": {"title": ".setdefault(name, value=True)", "body": "<p>Adds an attribute or sets a property, <em>but only if it's not already present</em>. Pass a name and a value to set an attribute. Omit the value or use <code>True</code> as value to set a property instead.</p> <div><pre><code>{% do attrs.setdefault(\"aria-label\", \"Products\") %}\n</code></pre></div>"}, "/guide/extra#updateddnone-kw": {"title": ".update(dd=None, **kw)", "body": "<p>Updates several attributes/properties with the values of <code>dd</code> and <code>kw</code> dicts.</p> <div><pre><code>{%- do attrs.update(\n    role=\"tab\",\n    aria_selected=\"true\" if active else \"false\",\n    aria_controls=target,\n    tabindex=\"0\" if active else \"-1\",\n) -%}\n</code></pre></div> <p>The underscores in the names will be translated automatically to dashes, so <code>aria_selected</code> will become the attribute <code>aria-selected</code>.</p>"}, "/guide/extra#getname-defaultnone": {"title": ".get(name, default=None)", "body": "<p>Returns the value of the attribute or property, or the default value if it doesn't exists.</p> <div><pre><code>{%- set role = attrs.get(\"role\", \"tab\")\n</code></pre></div>"}, "/guide/extra#render": {"title": ".render()", "body": "<p>Renders the attributes and properties as a string. To provide consistent output, the attributes and properties are sorted by name and rendered like this: <code><sorted attributes> + <sorted properties></code>.</p> <div><pre><code><button {{ attrs.render() }}>\n  {{ content }}\n</button>\n</code></pre></div> <p><details open> <summary>  Beware  </summary> <div>Using <code><Component {{ attrs.render() }}></code> to pass the extra arguments to other components <strong>WILL NOT WORK</strong>. That is because the components are translated to macros before the page render.</p> <p>You must pass them as the special argument <code>__attrs</code>.</p> <div><pre><code>{#--- WRONG \ud83d\ude35 ---#}\n<MyButton {{ attrs.render() }} />\n\n{#--- GOOD \ud83d\udc4d ---#}\n<MyButton __attrs={attrs} />\n</code></pre></div> <p>Another options is to explicity define which arguments are needed for the sub-components:</p> <p><div><pre><code>{#def btn_class='' #}\n\n<MyButton class={btn_class} />\n</code></pre></div></div> </details></p>"}, "/guide/css-and-js#": {"title": "Adding CSS and JS", "body": "<header> <div> <p>Guide</p> <h1>Adding CSS and JS </div> <p>Your components might need custom styles or custom JavaScript for many reasons. Instead of using global stylesheet or scripts files, writing assets per individual component has several advantages:</p> </header> <ul> <li><strong>Portability</strong>: You can copy a component from one project to another kmowing it will keep working as expected.</li> <li><strong>Performance</strong>: On each page, only load the css and js that you need. Also, the browser will already have cached the assets of the components for other pages that use them.</li> <li><strong>Simple testing</strong>: You can test the JS of a component indepently from others.</li> </ul>"}, "/guide/css-and-js#declaring-assets": {"title": "Declaring assets", "body": "<p>The css and/or the js of a component must be declared in the metatada header with <code>{#css ... #}</code> and <code>{#js ... #}</code></p> <div><pre><code>{#css lorem.css ipsum.css #}\n{#js foo.js bar.js #}\n</code></pre></div> <p>The filepaths must be relative to the root of your components catalog (e.g.: <code>components/</code>). Both of these list are optional.</p>"}, "/guide/css-and-js#including-assets-in-your-pages": {"title": "Including assets in your pages", "body": "<p>The catalog will collect all css and js file paths from the components used on a \"page\" render on the <code>catalog.collected_css</code> and <code>catalog.collected_js</code> lists.</p> <p>For example, after rendering this component:</p> <div>components/MyPage.jinja<pre><code>{#css mypage.css #}\n{#js mypage.js #}\n\n<Layout title=\"My page\">\n  <Card>\n    <CardBody>\n      <h1>Lizard</h1>\n      <p>The Iguana is a type of lizard</p>\n    </CardBody>\n    <CardActions>\n      <Button size=\"small\">Share</Button>\n    </CardActions>\n  </Card>\n</Layout>\n</code></pre></div> <p>Asuming the <code>Card</code>, and <code>Button</code> components declare css assests, this will the state of the <code>collected_css</code> list:</p> <div><pre><code>catalog.collected_css\n['mypage.css', 'card.css', 'button.css']\n</code></pre></div> <p>You can add the <code><link></code> and <code><script></code> tags in your page automatically by rendering the global <code>components_assets</code> variable in your layout component like this:</p> <div>components/Layout.jinja<pre><code>{#def title #}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>{{ title }}</title>\n  {{ components_assets }}\n</head>\n<body>\n  {{ content }}\n</body>\n</html>\n</code></pre></div> <p>The variable will be rendered as:</p> <div><pre><code><link rel=\"stylesheet\" href=\"/static/components/mypage.css\">\n<link rel=\"stylesheet\" href=\"/static/components/card.css\">\n<link rel=\"stylesheet\" href=\"/static/components/button.css\">\n<script src=\"/static/components/mypage.js\" defer></script>\n<script src=\"/static/components/card.js\" defer></script>\n<script src=\"/static/components/button.js\" defer></script>\n</code></pre></div>"}, "/guide/css-and-js#middleware": {"title": "Middleware", "body": "<p>The tags above will not work at all if your application can't return the content of those files, and right now it can't.</p> <p>For that reason, Template Components include a WSGI middleware that will process those URLs if you add it to your application.</p> <div><pre><code>from flask import Flask\nfrom tcom import Catalog\n\napp = Flask(__name__)\n\n# Here we add the flask Jinja globals, filters, etc.\n# like `url_for()`\ncatalog = tcom.Catalog(\n    globals=app.jinja_env.globals,\n    filters=app.jinja_env.filters,\n    tests=app.jinja_env.tests,\n    extensions=app.jinja_env.extensions,\n)\ncatalog.add_folder(\"myapp/components\")\n\napp.wsgi_app = catalog.get_middleware(\n    app.wsgi_app,\n    autorefresh=app.debug,\n)\n</code></pre></div> <p>The middleware uses the battle-tested Whitenoise library and it will only respond to the <em>.css</em> and <em>.js</em> files inside the component(s) folder(s). You can configure it to also return files with other extensions. For example:</p> <div><pre><code>catalog.get_middleware(app, allowed_ext=[\".css\", \".js\", \".svg\", \".png\"]\n</code></pre></div> <p>Be aware that, if you use this option, <code>get_middleware()</code> must be called <strong>after</strong> all foldes are added.</p> <p>...</p>"}, "/guide/css-and-js#good-practices": {"title": "Good practices", "body": ""}, "/guide/css-and-js#css-scoping": {"title": "CSS Scoping", "body": "<p>The styles of your components will not be auto-scoped. This means the styles of a component can affect other components, and, likewise, it will be affected by global styles or the styles of other components.</p> <p>To protect yourself against that, <em>always</em> add a custom class to the root element(s) of your component and use it to scope the rest of the component styles. Example:</p> <div>components/Card.jinja<pre><code>{#css card.css #}\n\n{% do attrs.add_class(\"Card\") -%}\n<div {{ attrs.render() }}>\n  <h1>My Card</h1>\n  ...\n</div>\n</code></pre></div> <div>components/card.css<pre><code>/* \ud83d\udeab DO NOT do this */\nh1 { font-size: 2em; }\nh2 { font-size: 1.5em; }\na { color: blue; }\n\n/* \ud83d\udc4d DO THIS instead */\n.Card h1 { font-size: 2em; }\n.Card h2 { font-size: 1.5em; }\n.Card a { color: blue; }\n</code></pre></div> <p>Always use a class instead of an <code>id</code>, or the component will not be usable more than once per page.</p>"}, "/guide/css-and-js#js-events": {"title": "JS events", "body": "<p>Your components might be inserted in the page on-the fly, after the JavaScript files has been loaded and executed. So, attaching events to the elements on the page on load will not be enough:</p> <div>components/card.js<pre><code>// This will fail for any Card component inserted after page load\ndocument.querySelectorAll('.Card button.share')\n  .forEach( (node) => {\n    node.addEventListener(\"click\", handleClick)\n  })\n\n/* ... etc ... */\n</code></pre></div> <p>A solution can be using the <code>MutationObserver</code> JS API to detect changes to the document and attach the events to all the new inserted components:</p> <div>components/card.js<pre><code>new MutationObserver( (mutationList) => {\n  mutationList.forEach( (mutation) => {\n    if (mutation.type !== \"childList\") return\n    mutation.addedNodes.forEach( (node) => {\n      if (node.nodeType === 1) {\n        addEvents(node)\n      }\n    })\n  })\n})\n.observe(document.body, {\n    subtree: true,\n    childList: true,\n    attributes: false,\n    characterData: false\n})\n\nfunction addEvents (root) {\n  /* Attach events to all the child components\n  of the new node */\n  root.querySelectorAll('.Card button.share')\n    .forEach( (node) => {\n      node.addEventListener(\"click\", handleClick)\n    })\n}\n\n// We call it a first time to attach the events for the\n// components present on the document on page load\naddEvents(document)\n\n/* ... etc ... */\n</code></pre></div>"}}, "es": {"/es/#": {"title": "Inicio", "body": "<p>Espa\u00f1ol!</p>"}, "/es/ole#": {"title": "Hola hola", "body": ""}, "/es/ole#hola-hola": {"title": "Hola hola", "body": ""}}}